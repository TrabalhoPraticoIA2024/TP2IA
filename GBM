import pandas as pd
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.impute import SimpleImputer
from tkinter import Tk
from tkinter.filedialog import askopenfilename

# Função para selecionar o arquivo
def selecionar_arquivo():
    Tk().withdraw()  # Ocultar a janela principal do Tkinter
    caminho_arquivo = askopenfilename()  # Abrir a caixa de diálogo para selecionar o arquivo
    return caminho_arquivo

# Selecionar o arquivo de treinamento
print("Selecione o arquivo de treinamento (Training.csv)")
caminho_train = selecionar_arquivo()
train_data = pd.read_csv(caminho_train)

# Selecionar o arquivo de teste
print("Selecione o arquivo de teste (Testing.csv)")
caminho_test = selecionar_arquivo()
test_data = pd.read_csv(caminho_test)

# Remover a coluna Unnamed: 133 se existir nos dados de treinamento
if 'Unnamed: 133' in train_data.columns:
    train_data = train_data.drop(columns=['Unnamed: 133'])

# Separar as features e o alvo nos dados de treinamento
X_train = train_data.drop(columns=['prognosis'])
y_train = train_data['prognosis']

# Dividir os dados de treinamento em treino e validação
X_train_split, X_val, y_train_split, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Imputar valores ausentes com a mediana nas colunas numéricas
imputer = SimpleImputer(strategy='median')
X_train_split = imputer.fit_transform(X_train_split)
X_val = imputer.transform(X_val)

# Treinar o modelo de Gradient Boosting
gbm = GradientBoostingClassifier(random_state=42)
gbm.fit(X_train_split, y_train_split)

# Avaliar o modelo nos dados de validação
y_val_pred = gbm.predict(X_val)
val_accuracy = accuracy_score(y_val, y_val_pred)
classification_rep_val = classification_report(y_val, y_val_pred)

print("Acurácia nos dados de validação:", val_accuracy)
print("Relatório de classificação nos dados de validação:")
print(classification_rep_val)

# Alinhar as colunas do conjunto de teste com as colunas do conjunto de treino
X_test = test_data[X_train.columns]  # Selecionar apenas as colunas que estão no conjunto de treino

# Imputar valores ausentes no conjunto de teste
X_test = imputer.transform(X_test)
y_test_pred = gbm.predict(X_test)

# Salvar as previsões em um novo arquivo CSV
resultado = test_data.copy()
resultado['prognosis'] = y_test_pred
resultado.to_csv('Testing_with_predictions.csv', index=False)

print("Previsões salvas no arquivo Testing_with_predictions.csv")
